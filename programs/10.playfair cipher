#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MATRIX_SIZE 5
void findPosition(char matrix[MATRIX_SIZE][MATRIX_SIZE], char ch, int *row, int *col) {
    if (ch == 'J')
        ch = 'I';

    for (*row = 0; *row < MATRIX_SIZE; (*row)++) {
        for (*col = 0; *col < MATRIX_SIZE; (*col)++) {
            if (matrix[*row][*col] == ch) {
                return;
            }
        }
    }
}

void encryptPair(char matrix[MATRIX_SIZE][MATRIX_SIZE], char a, char b, char *result) {
    int row1, col1, row2, col2;
    findPosition(matrix, a, &row1, &col1);
    findPosition(matrix, b, &row2, &col2);

    if (row1 == row2) {
        result[0] = matrix[row1][(col1 + 1) % MATRIX_SIZE];
        result[1] = matrix[row2][(col2 + 1) % MATRIX_SIZE];
    } else if (col1 == col2) {
        result[0] = matrix[(row1 + 1) % MATRIX_SIZE][col1];
        result[1] = matrix[(row2 + 1) % MATRIX_SIZE][col2];
    } else {
        result[0] = matrix[row1][col2];
        result[1] = matrix[row2][col1];
    }
}
void preprocessMessage(const char *message, char *processedMessage) {
    int len = strlen(message);
    int index = 0;
    for (int i = 0; i < len; i++) {
        if (isalpha(message[i])) {
            processedMessage[index++] = toupper(message[i]);
        }
    }
    processedMessage[index] = '\0';
    if (index % 2 != 0) {
        processedMessage[index] = 'X';
        processedMessage[index + 1] = '\0';
    }
}

void encryptMessage(char matrix[MATRIX_SIZE][MATRIX_SIZE], const char *message, char *encryptedMessage) {
    char processedMessage[100];
    preprocessMessage(message, processedMessage);

    int len = strlen(processedMessage);
    for (int i = 0; i < len; i += 2) {
        encryptPair(matrix, processedMessage[i], processedMessage[i + 1], &encryptedMessage[i]);
    }
}

int main() {
    char matrix[MATRIX_SIZE][MATRIX_SIZE] = {
        {'M', 'F', 'H', 'I', 'I'},
        {'U', 'N', 'O', 'P', 'Q'},
        {'Z', 'V', 'W', 'X', 'Y'},
        {'7', '/', '1', '2', '1'},
        {'E', 'L', 'A', 'R', 'G'}
    };

    const char *message = "Must see you over Cadogan West. Coming at once";
    char encryptedMessage[100];

    encryptMessage(matrix, message, encryptedMessage);

    printf("Original message: %s\n", message);
    printf("Encrypted message: %s\n", encryptedMessage);

    return 0;
}
